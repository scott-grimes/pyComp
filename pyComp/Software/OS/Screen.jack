// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * Graphic screen library.
 */
class Screen {
    static int start; //start of our screen
    static int end; //end address of our screen
    static int cols, rows;
    static boolean color; //true=black, false=white
    static Array twoToThe;

    /** Initializes the Screen. */
    function void init() {
    var int i,b;
    let cols = 512;
    let rows = 256;
    let start = 16384;
    let end = 24576;
    let color = true;
    
    let twoToThe = Array.new(16);
    let i = 0;
    let b = 1;
    while(i<16){
    let twoToThe[i] = b;
    let i = i+1;
    let b = b+b;
    
    }
    return;
    }

    /** Erases the whole screen. */
    function void clearScreen() {
    var int i;
    let i = start;
    while(i<end){
    do Memory.poke(i,false);
    let i = i+1;
    }
    return;
    }

    /** Sets the color to be used in further draw commands
     *  where white = false, black = true. */
    function void setColor(boolean b) {
    let color = b;
    return;
    }

    /** Draws the (x, y) pixel. */
    function void drawPixel(int x, int y) {
    var int pixel;
    var int address;
    var int bitInAddress;
    var int rem;
    
    //Illegal pixel coordinates
    if((x<0)|(y>256)|(x>512)|(y<0)){
    do Sys.error(7);
    }
    
    
    
    let rem = x/16;
    let bitInAddress = x-(rem*16);
    let address = start+((y*32)+rem);
    let pixel = Memory.peek(address);
    if(color){
    let pixel = twoToThe[bitInAddress] | pixel;
    }
    else{
    let pixel = (~twoToThe[bitInAddress]) & pixel;
    
    }
    do Memory.poke(address, pixel);
    return;
    }

    /** Draws a line from (x1, y1) to (x2, y2). */
    function void drawLine(int x1, int y1, int x2, int y2) {
    var int dx,dy,a,b,temp;
    var int slope;
    var int adyMinusbdx;
    
    //Illegal line coordinates
    if((x1<0)|(y1>256)|(x1>512)|(y1<0)|
       (x2<0)|(y2>256)|(x2>512)|(y2<0)){
    do Sys.error(8);
    }
    
    
    let dx = x2-x1;
    let dy = y2-y1;
    
    let a = 0;
    let b = 0;
    let adyMinusbdx = 0;
    
    //horizontal line draw
    if(dx = 0){
        if(y2<y1){
            let temp = y1;
            let y1 = y2;
            let y2 = temp;
        }
        while(~(y1=y2)){
            do Screen.drawPixel(x1,y1);
            let y1 = y1+1;
        }
        return;
    }
    
    //vertical line draw
    if(dy = 0){
        if(x2<x1){
            let temp = x1;
            let x1 = x2;
            let x2 = temp;
        }
        while(~(x1=x2)){
            do Screen.drawPixel(x1,y1);
            let x1 = x1+1;
        }
        return;
    }
    
    //line is at an angle. always draw from the left
    //to the right side of the screen
    
    //is x1,y1 is on the right? swap it with x2,y2
    if(dx<0){
        let dx = -dx;
        let temp = x1;
        let x1 = x2;
        let x2 = temp;
        
        let temp = y1;
        let y1 = y2;
        let y2 = temp;
        let dy = -dy;
        }
        
    //is y2<y1? we are drawing a negative slope!
    if(dy<0){   
        let slope = -1;
        let dy = -dy;
    }
    else{
    let slope = 1;
    }
    
    while((~(a > dx)))
        {
            do Screen.drawPixel(x1 + a, y1 + (slope*b));
            if(adyMinusbdx < 0)
            {
                let a = a + 1;
                let adyMinusbdx = adyMinusbdx + dy;
            }
            else
            {
                let b = b + 1;
                let adyMinusbdx = adyMinusbdx - dx;
            }
        }
        return;
    }

    /** Draws a filled rectangle where the top left corner
     *  is (x1, y1) and the bottom right corner is (x2, y2). */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
    
    //Illegal rectangle coordinates
    if((x1<0)|(y1>256)|(x1>512)|(y1<0)|
       (x2<0)|(y2>256)|(x2>512)|(y2<0)){
    do Sys.error(9);
    }
    
    
    while(~(y1=y2)){
        do Screen.drawLine(x1,y1,x2,y1);
        let y1 = y1+1;
    
    }
    
    return;
    }

    /** Draws a filled circle of radius r around (cx, cy). */
    function void drawCircle(int cx, int cy, int r) {
    var int i, xdiff;
    let i = -r;
    
    //Illegal center coordinates
    if((cx<0)|(cy>256)|(cx>512)|(cy<0)){
    do Sys.error(12);
    }
    
    //Illegal radius
    if(r<0){
    do Sys.error(13);
    }
    
    while(i<r){
        let xdiff = Math.sqrt((r*r)-(i*i));
        do Screen.drawLine(cx-xdiff,cy+i,cx+xdiff,cy+i);
        let i = i+1;
    }
    
    
    
    return;
    }
}
