// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents a String object. Implements the String type.
 */
class String {

    field Array s;
    field int mem_size, string_size;

    /** Constructs a new empty String with a maximum length of maxLength. */
    constructor String new(int maxLength) {
    
    //Maximum length must be non-negative
    if(maxLength<0){
    do Sys.error(14);
    }
    
    //maxLength of 0 is supported
    if(maxLenth = 0){
    let maxLength = 1;
    }
    
    
    let s = Array.new(maxLength);
    let mem_size = maxLength;
    let string_size = 0;
    return this;
    }

    /** De-allocates the string and frees its space. */
    method void dispose() {
    do Memory.deAlloc(s);
    return;
    }

    /** Returns the current length of this String. */
    method int length() {
    return string_size;
    }

    /** Returns the character at location j. */
    method char charAt(int j) {
    
    //String index out of bounds
    if((j<0)|(j>(string_size-1))){
    do Sys.error(15);
    }
    
    return s[j];
    }

    /** Sets the j'th character of this string to be c. */
    method void setCharAt(int j, char c) {
    
    //String index out of bounds
    if((j<0)|(j>(string_size-1))){
    do Sys.error(16);
    }
    
    let s[j] = c;
    return;
    }

    /** Appends the character c to the end of this String.
     *  Returns this string as the return value. */
    method String appendChar(char c) {
    
    //String is full
    if(string_size=mem_size){
    do Sys.error(17);
    }
    
    let s[string_size] = c;
    let string_size = string_size+1;
    return this;
    }

    /** Erases the last character from this String. */
    method void eraseLastChar() {
    
    //String is empty
    if(string_size<1){
    do Sys.error(18);
    }
    
    let string_size = string_size-1;
    return;
    }

    /** Returns the integer value of this String until the first non
     *  numeric character. */
    method int intValue() {
    var int value, i;
    var boolean isNeg;
    let isNeg = false;
    let value = 0;
    let i = 0;
    //first character is '-'
    if(s[i] = 45){ 
    let isNeg = true;
    let i = i+1;
    }
    
    while(i<string_size){
        if(String.is_digit(s[i])){
            let value = 10*value;
            let value = value+String.toInt(s[i]);
            let i = i+1;}
        else{
            if(isNeg){
            let value = -value;}
            return value;
        }
    }
    if(isNeg){
    let value = -value;}
    return value;
    }

    /** Sets this String to hold a representation of the given number. */
    method void setInt(int number) {
    var int digit;
    var boolean isNeg;
    do dispose();
    let s = Array.new(7);
    let mem_size = 7;
    let string_size = 0;
    
    if(number<0){
    do appendChar(45);
    let number = -number;
    
    }
    
    do recursiveSetInt(number);
    
    return;
    }
    
    /**recursive helper to convert a given int into a string*/
    method void recursiveSetInt(int number){
    
    if(number>9){
    do recursiveSetInt(number/10);
    do appendChar(String.toChar(Math.mod(number,10)));
    
    }
    else{
    do appendChar(String.toChar(number));
    }
    return;
    
    
    }
    
    /** Returns whether the given char is a digit or not */
    function boolean is_digit(char c) {
        return ((c > 47) & (c < 58));
    }
    
    /** Returns the integer value of the given digit character */
    function int toInt(char c) {
        return c - 48;
    }
    
    /** Returns the char value of the given integer (0 to 9 inclusive) */
    function char toChar(int i) {
        return i + 48;
    }

    /** Returns the new line character. */
    function char newLine() {
    return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
    return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
    return 34;
    }
}
