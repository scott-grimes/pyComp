/**
 * A Math Library
 */
class Math {

	//array where twoToThe[j] is equal to 2^j
	static Array twoToThe;
 
    function void init() {
    	var int i;
    	let i = 0;
    	let twoToThe = Array.new(16);  
    	    	
    	while(i<16){
    	let twoToThe[i] = Math.pow(2,i);
        let i = i+1;
    	}
    	
    	return;
    }

    function int abs(int x) {
    if(x<0){
    	return -x;
    }
    	return x;
    }

    /** Returns the product of x and y. */
    function int multiply(int x, int y) {
    var int sum, shiftedX, j;
    let sum = 0;
    let shiftedX=x;
    let j = 0;
    while(j<16){
    	if (Math.bit(y,j)){
    		let sum = sum+shiftedX;
    	}
    	let shiftedX = shiftedX+shiftedX;
    	let j = j+1;
    }
return sum;
}

    /** Returns the integer part of x/y. */
    function int divide(int x, int y) {
    var int q;
    //if x or y is 0
    if((x=0) | (y=0)){
    return 0;
    }
    
    //if x or y is neg
    if(x<0){
    return -Math.divide(-x,y);
    }
    if(y<0){
    return -Math.divide(x,-y);
    }
    
    if(y>x){
    	return 0;
    }
	let q = Math.divide(x,2*y);    
    if((x-(2*q*y))<y)
    {
    return 2*q;
    }
    
    return (2*q)+1;
    
    }
    
    /** Returns the remainder part of x/y */
    function int mod(int x, int y) {
        var int q;
        
        let q = Math.divide(x, y);
        return x - (q*y);
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
    //max bits is 16
    //max j = 16/2-1
    var int y, j,n;
    let y = 0;
    let j = 7;
    
    while(j>-1){
    let n = y+Math.pow(2,j);
    if(~(Math.pow(n,2)>x) &
        Math.pow(n,2)>0){
        let y = n;
    }
    let j = j-1;
    }
    return y;
    
    
   
    }
    
    /** Returns x^y */
    function int pow(int x, int y){
    
	if(y=0){
		return 1;
		}
	return x*Math.pow(x,y-1);
    
    
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
    if(a>b){
    return a;
    }
    return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
    if(a<b){
    return a;
    }
    return b;
    }
    
    /** Returns true if the j-th bit of the integer x is 1*/
	function boolean bit(int x, int j){
		return ~((x & twoToThe[j]) = 0);
	}

}
