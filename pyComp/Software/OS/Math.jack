/**
 * A Math Library
 */
class Math {

	//array where twoToThe[j] is equal to 2^j
	static Array twoToThe;

    function void init() {
    	var int i,b;
    	let i = 15;
    	let b = 2;
    	let twoToThe = Array.new(16);
    	let twoToThe[15] = 1;
    	
    	while(i>0){
    	let i = i-1;
    	let twoToThe[i] = b;
    	let b = b+b; 
    	}
    	
    	return;
    }

    function int abs(int x) {
    if(x<0){
    	return -x;
    }
    	return x;
    }

    /** Returns the product of x and y. */
    function int multiply(int x, int y) {
    var int sum, shiftedX, j;
    let sum = 0;
    let shiftedX=x;
    let j = 0;
    while(j<y){
    	if (Math.bit(x,j)){
    		let sum = sum+shiftedX;
    	}
    	let shiftedX = shiftedX+shiftedX;
    	let j = j+1;
    }
return sum;
}

    /** Returns the integer part of x/y. */
    function int divide(int x, int y) {
    //var boolean xNeg, yNeg;
    var int q;
    
    if(y>x){
    	return 0;
    }
	let q = Math.divide(x,2*y);    
    if((x-(2*q*y))<y)
    {
    return 2*q;
    }
    
    return (2*q)+1;
    
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
    var int y, j, n;
    return 0;
    
    
   
    }
    
    /** Returns x^y */
    function int pow(int x, int y){
    
	if(y=0){
		return 1;
		}
	return x*Math.pow(x,y-1);
    
    
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
    if(a>b){
    return a;
    }
    return b;
    
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
    if(a<b){
    return a;
    }
    return b;
    }
    
    /** Returns true if the j-th bit of the integer x is 1*/
	function boolean bit(int x, int j){
		return x & twoToThe[j];
	}

}
