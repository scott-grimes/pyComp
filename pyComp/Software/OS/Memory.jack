// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * Memory operations library.
 */ 
class Memory {
    static Array m;
    static Array freeList;

    /** Initializes memory parameters. */
    function void init() {
    let m = 0;
    
    let freeList = 2048;  //start of the heap
    let freeList[0] = -1; //address of next block
    let freeList[1] = 16383-2048-1; //size of this block
    
    return;
    }

    /** Returns the value of the main memory at the given address. */
    function int peek(int address) {
    return m[address];
    }

    /** Sets the value of the main memory at this address
     *  to the given value. */
    function void poke(int address, int value) {
    let m[address] = value;
    }

    /** finds and allocates from the heap a memory block of the 
     *  specified size and returns a reference to its base address. */
    function int alloc(int size) {
    var int blockSize, nextAddress;
    var Array last,current;
    let last = freeList;
    let current = freeList;
    let blockSize = base[1];
    
    while(blockSize<size){
        let last = current;
        let current = free[0] //move to the next free block
        let blockSize = current[1]
    }
    
    let last[0] = current+size+1;
    let last[1] = last[1]-size-1;
    return current;
    }

    /** De-allocates the given object and frees its space. */
    function void deAlloc(int object) {
    }    
}
