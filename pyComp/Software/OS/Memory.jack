// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack



// https://github.com/jtdowney/nand2tetris/blob/master/12/Memory.jack
//simpler






/**
 * Memory operations library.
 */ 
class Memory {
    static Array m;
    static Array freeList;
    static int SIZE,NEXT,NONE_FOUND;
    
    //Each free block has the following orginization
    //b[0] = size of this block including this int and one header cell
    //b[1] = header cell with the address of the next block
    //b[2...] = data from [0..size-2] inclusive
    
    //every returned block has the following orginization
    //b[0] = size of this block including this int
    //b[1...] = data from [0..size-1]
    

    /** Initializes memory parameters. */
    function void init() {
    let m = 0;
    let SIZE = 0;
    let NEXT = 1;
    let NONE_FOUND = -666;
    
    let freeList = 2048;  //start of the heap
    let freeList[SIZE] = 16383-2048-1; //size of this block
    let freeList[NEXT] = null; //next address (null if no more free blocks exist)
    
    return;
    }

    /** Returns the value of the main memory at the given address. */
    function int peek(int address) {
    return m[address];
    }

    /** Sets the value of the main memory at this address
     *  to the given value. */
    function void poke(int address, int value) {
    let m[address] = value;
    return;
    }

    /** finds and allocates from the heap a memory block of the 
     *  specified size and returns a reference to its base address. */
    function int alloc(int size) {
    var Array currB, lastB ,nextB;
    let currB = freeList;
    let lastB = null;
    
    while(currB[SIZE]<size){
    let lastB = currB;
    let currB = currB[NEXT];
    if(currB = null){
        return null;
    }
    }
    
    let nextB = currB+2+size;
    let nextB[SIZE] = currB[SIZE]-size-2;
    let nextB[NEXT] = currB[NEXT];
    let currB[SIZE] = size;
    let currB[NEXT] = null;
    
    if(lastB = 0){
        let freeList = nextB;
    }
    else{
    let lastB[NEXT] = nextB;
    }
    
    return currB+2;
    
    }
    
   

    
    /** De-allocates the given object and frees its space. */
    function void deAlloc(int object) {
    var Array curr;
    let curr = object-2;
    let curr[NEXT] = freeList;
    let freeList = curr;
    
    return;
    }    
    }